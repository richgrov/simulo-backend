name: Go Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/go-backend.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/go-backend.yml"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.3"
          cache-dependency-path: backend/go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Change to backend directory
        run: cd backend

      - name: Download dependencies
        working-directory: ./backend
        run: go mod download

      - name: Verify dependencies
        working-directory: ./backend
        run: go mod verify

      - name: Run go vet
        working-directory: ./backend
        run: go vet ./...

      - name: Run go fmt check
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Install staticcheck
        working-directory: ./backend
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        working-directory: ./backend
        run: staticcheck ./...

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb?sslmode=disable
          GO_ENV: test
        run: go test -v -race -coverprofile=coverage.out ./...

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.3"
          cache-dependency-path: backend/go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ./backend
        run: go mod download

      - name: Build for Linux
        working-directory: ./backend
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o bin/backend-linux-amd64 .

      - name: Build for macOS
        working-directory: ./backend
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o bin/backend-darwin-amd64 .
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o bin/backend-darwin-arm64 .

      - name: Build for Windows
        working-directory: ./backend
        run: |
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o bin/backend-windows-amd64.exe .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-binaries
          path: backend/bin/

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.3"
          cache-dependency-path: backend/go.sum

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master

  dependency-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.3"
          cache-dependency-path: backend/go.sum

      - name: Download dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run govulncheck
        working-directory: ./backend
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          # Only check for vulnerabilities in dependencies, not standard library
          govulncheck -mode=binary .
        continue-on-error: true

      - name: Check for known vulnerabilities in go.mod
        working-directory: ./backend
        run: |
          # Simple check for known vulnerable patterns in dependencies
          echo "Checking dependencies for known issues..."
          go list -m all | grep -E "(vulnerable|security)" || echo "No obvious vulnerable dependencies found"
